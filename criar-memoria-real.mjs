#!/usr/bin/env node

/**
 * Teste Real - Criando mem√≥ria e mostrando localiza√ß√£o
 */

import { TopicMemoryManager } from './dist/core/topic-memory-manager.js';

async function criarMemoriaReal() {
  console.log('üéØ === CRIANDO MEM√ìRIA REAL ===\n');
  
  // Mostrar configura√ß√£o atual
  console.log('üìç Configura√ß√£o atual:');
  console.log(`   MEMORY_BANK_ROOT: ${process.env.MEMORY_BANK_ROOT || 'N√ÉO DEFINIDA'}`);
  
  // Instanciar gerenciador
  const manager = new TopicMemoryManager();
  console.log(`   ‚ûú Diret√≥rio que ser√° usado: ${manager.getMemoryRootPath()}\n`);
  
  // Criar uma mem√≥ria real
  const projectName = 'meu-projeto-teste';
  
  console.log('üíæ Criando mem√≥ria real...');
  
  // Armazenar informa√ß√µes em diferentes t√≥picos
  await manager.storeTopicMemory(
    projectName, 
    'summary', 
    'Este √© meu projeto de teste do MCP Advanced Memory Bank v6.0.0.\nEle demonstra como o sistema armazena mem√≥rias usando a vari√°vel MEMORY_BANK_ROOT.',
    ['projeto', 'teste', 'demonstracao'],
    8
  );
  
  await manager.storeTopicMemory(
    projectName,
    'bugs',
    'Bug #1: Sistema n√£o respeitava MEMORY_BANK_ROOT - RESOLVIDO! ‚úÖ\nBug #2: Faltavam logs informativos - RESOLVIDO! ‚úÖ',
    ['bug', 'resolvido'],
    7
  );
  
  await manager.storeTopicMemory(
    projectName,
    'features',
    'Feature implementada: Suporte completo a MEMORY_BANK_ROOT\n- Sistema detecta e usa a vari√°vel de ambiente\n- Cria diret√≥rios automaticamente\n- Logs informativos sobre localiza√ß√£o',
    ['feature', 'memory-bank-root', 'implementado'],
    9
  );
  
  console.log('‚úÖ Mem√≥rias criadas com sucesso!\n');
  
  // Mostrar onde os arquivos foram salvos
  const projectPath = `${manager.getMemoryRootPath()}\\${projectName}.json`;
  console.log('üìÅ LOCALIZA√á√ÉO DOS ARQUIVOS:');
  console.log(`   ‚ûú Diret√≥rio raiz: ${manager.getMemoryRootPath()}`);
  console.log(`   ‚ûú Arquivo do projeto: ${projectPath}\n`);
  
  // Listar t√≥picos criados
  const topics = await manager.listTopics(projectName);
  console.log('üìã T√≥picos criados:');
  topics.forEach(topic => console.log(`   - ${topic}`));
  
  // Mostrar info do projeto
  const projectInfo = await manager.getProjectInfo(projectName);
  console.log(`\nüìä Informa√ß√µes do projeto '${projectInfo.name}':`);
  console.log(`   - T√≥picos: ${projectInfo.topicCount}`);
  console.log(`   - Mem√≥rias: ${projectInfo.memoryCount}`);
  console.log(`   - Import√¢ncia total: ${projectInfo.totalImportance}`);
  console.log(`   - Criado: ${new Date(projectInfo.createdAt).toLocaleString()}`);
  
  console.log('\nüéâ TESTE CONCLU√çDO!');
  console.log(`üìç Suas mem√≥rias est√£o em: ${manager.getMemoryRootPath()}`);
  console.log(`üìÑ Arquivo do projeto: ${projectName}.json`);
}

// Executar teste
criarMemoriaReal().catch(console.error);
